float passthrough (basal): 206

sqrt: 187
inversesqrt(x): 187
1/sqrt(x) 187

max: 174
min 173
clamp 174

kx 180
k/x: 180

xx+k: 166

x+float: 170
float-x: 175;

pow vs mul:
    pow(x,float): 154
    pow(x,4) 187
    xxxx 162
    (xx)(xx) 187
    xx 200
    pow(x,2) 195

trigonometric:
    tanh: 86
    sin: 190
    cos: 192

smoothsteps:
    smoothstep native: 104
    smoothstep non native: 101
    smoothstep_sin: 100
    smoothstep_cos: 101
    linear_step: 101

exp(x) 165
pow(e,x) 170

exp2(x) 188
pow(2,x) 187

log2(x) 193
log(x) 180

step vs if then vs float(bool):
    step() 121
    if/then: 143  <--- !!!
    ternary 143
    if 0 then 0 else 2: 145
    return 2.0 float(x != 0.0): 145 <-- good

floor() 174
ceil() 174
fract 174
mod native 133
mod via floor 133
mod via fract 136

abs(float) 205
sign(float) 126
round(float) 174
roundEven(float) 175

distance(vec3(x), vec3(0.5)) :144
distance via sqrt and dots: 144
length: 157
length via dot 156 


There some interesting findings:
sqrt is very light, unexpected to me as 1/sqrt
max, min and clamp are the same, use clamp for an easier life.
mul and divs by k are the same, no need to do the math by your own
raising pow to an integer k is faster than raising it to a float
my compiler is unable to optimize xxxx, atually slower than pow(x,4) which is optimized as (**xx)(xx) <-- parallel computation
tanh is very slow, more than smoothstep that gives more or less the same result, avoid tanh
step() is slow here!
simple if thens do not produce branching, in doubt if possible, you can cast bool to float**
mod() here is slow, you can implement it via fract to have faster implementation
abs is blazing fast
avoid sign and use if/then
sign is very strange, if/then wins


return mix(3, 4, float( x==0.0)): 105

float o;
    (x==0.0) ? o=3 : o=4;
    return o;
...145

mix(k1,k2,x) 133

distance(vec3(x), vec3(0.5)) :144
distance via sqrt and dots: 144 
length 157
length via sqrt and dot , the same

definitely weird things going on with mix() on my side:
    float k = x+3;
    float z = x-4;
    return (z-k)*x + k;//153
    return mix(z,k,x); //153 
    return mix(3,4,x); //134
    return (3-4)*x + 4;//173

so mix is indeed faster than ternary operators, but not when using costants, lol
